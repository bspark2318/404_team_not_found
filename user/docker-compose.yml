version: '3.8'
services:
  user:
    build: .
    container_name: user_service
    environment:
      - MONGODB_CONNSTRING=mongodb://user_db
    ports:
      - "5000:5000"

  user_mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    container_name: user_db
    volumes:
      - /data/db






#version: '3.8'
#services:
#  myapplication:
#    build: .
##    image: thanushrir/user_microservice
##    environment:
##      - MONGODB_CONNSTRING=mongodb://localhost:27017
#    ports:
#      - 5000:5000
#    volumes:
#      - .:/app
#    depends_on:
#      - mongodb
#    networks:
#      - backend
#  mongodb:
#    image: mongo:5.0
#    hostname: localhost
#    environment:
#      MONGO_INITDB_DATABASE: user
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: admin
#      MONGODB_DATA_DIR: /data/db
#    volumes:
#      - mongodbdata:/data/db
#    networks:
#      - backend
##    ports:
##      - 27017:27017
#volumes:
#  mongodbdata:
#    driver: local
#
#networks:
#  backend:
#    driver: bridge



#version: '3'
#services:
#
#  flask:
#    build:
#      context: app
#      dockerfile: dockerfile
#    container_name: flask
#    image: thanushrir/user_microservice
#    restart: unless-stopped
#    environment:
#      APP_ENV: "prod"
#      APP_DEBUG: "True"
#      APP_PORT: 5000
#      MONGODB_DATABASE: user
#      MONGODB_USERNAME: root
#      MONGODB_PASSWORD: admin
#      MONGODB_HOSTNAME: mongodb
#    volumes:
#      - appdata:/var/www
#    depends_on:
#      - mongodb
#    networks:
#      - frontend
#      - backend
#
#  mongodb:
#    image: mongo:4.0.8
#    container_name: mongodb
#    restart: unless-stopped
#    command: mongod --auth
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: mongodbuser
#      MONGO_INITDB_ROOT_PASSWORD: your_mongodb_root_password
#      MONGO_INITDB_DATABASE: flaskdb
#      MONGODB_DATA_DIR: /data/db
#      MONDODB_LOG_DIR: /dev/null
#    volumes:
#      - mongodbdata:/data/db
#    networks:
#      - backend
#
#  webserver:
#    build:
#      context: nginx
#      dockerfile: Dockerfile
#    image: digitalocean.com/webserver:latest
#    container_name: webserver
#    restart: unless-stopped
#    environment:
#      APP_ENV: "prod"
#      APP_NAME: "webserver"
#      APP_DEBUG: "true"
#      SERVICE_NAME: "webserver"
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - nginxdata:/var/log/nginx
#    depends_on:
#      - flask
#    networks:
#      - frontend
#
#networks:
#  frontend:
#    driver: bridge
#  backend:
#    driver: bridge
#
#volumes:
#  mongodbdata:
#    driver: local
#  appdata:
#    driver: local
#  nginxdata:
#    driver: local